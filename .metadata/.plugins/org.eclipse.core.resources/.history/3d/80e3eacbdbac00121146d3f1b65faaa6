package com.ivinny.tempcalc;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.ivnny.lib.MyForm;
import com.ivinny.json.CitiesT;
import com.ivinny.json.Json;

import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.DownloadManager.Request;
import android.content.Context;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

@SuppressLint("UseValueOf")
public class MainActivity extends Activity {

	private static final String TAG = "Network";
	LinearLayout ll;
	LinearLayout.LayoutParams lp;
	EditText et;
	TextView result;
	String[] types;
	TextView dataTView;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		//adds the types from the resources 
		types = new String[3];
		types[0] = getString(R.string.f);
		types[1] = getString(R.string.c);
		types[2] = getString(R.string.k);
		
		ll = new LinearLayout(this);
		ll.setOrientation(LinearLayout.VERTICAL);
		lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
		ll.setLayoutParams(lp);
		
		LinearLayout entryBox = MyForm.singleEntryWithButton(this, "EnterFarhenheit", "Convert");
		ll.addView(entryBox);
		
		//simple info view
		TextView tv = new TextView(this);
		tv.setText("Convert Fahrenheit to Celsius and Kelvin");
		
		ll.addView(tv);
		
		et = (EditText)entryBox.findViewById(1);
		et.setHint("Enter Farhenheit");
//		ll.addView(et);
		
		Button b = (Button)entryBox.findViewById(2);
		b.setText("Convert");
//		ll.addView(b);
		b.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				
				updateTemps(et.getText().toString());
			}
		});
		
		//create main linear layout (root)
		LinearLayout form = new LinearLayout(this);
		//sets the starting orientation
		form.setOrientation(LinearLayout.HORIZONTAL);
		lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
		form.setLayoutParams(lp);
		
		
		ll.addView(form);
		
		result = new TextView(this);
		ll.addView(result);
		
		//button used to download json data (for now we aren just simulating this)
		Button getDataBtn = new Button(this);
		getDataBtn.setText("Download Cities");
		ll.addView(getDataBtn);
		
		//results of json data after formatted
		dataTView = new TextView(this);
		ll.addView(dataTView);
		
		//button click for loading json data
		getDataBtn.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {

				String jsonStr = getTempForCityFromWebSvc("jacksonville");
					
				// TODO Auto-generated method stub
				JSONObject jsonObj = null;
				//using try catches to avoid app lockups
				try {
					jsonObj = new JSONObject(jsonStr);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					JSONArray cities = jsonObj.getJSONObject("current_observation");
					String text = "";
				    for(int i=0;i<cities.length();i++){
				    	//getting json from string in jsonobject
				        JSONObject json_data = cities.getJSONObject(i);
				        String city =  json_data.getJSONObject("display_location").getString("city");
				        //enum from string
				        CitiesT jType = CitiesT.fromLetter(city);
				        
				        Integer temp =  json_data.getInt("temp_f");
				        // .. get all value here
				        Log.i("City: ", city);  
				        text = text+"\r\n"+city+": "+temp+" ("+jType.isCold(temp)+")";
				    }
				    dataTView.setText(text);
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		});
		
		//like setting rootviewcontroller on ios
		setContentView(ll);
	}

	//get network data
	public String getTempForCityFromWebSvc(String city){
		String result = "";
		ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo ni = cm.getActiveNetworkInfo();
		if(ni!=null){
			if(ni.isConnected()){
				String url = "http://api.wunderground.com/api/87a8ccdf84e0370d/conditions/q/fl/"+city+".json";
			    HttpClient httpclient = new DefaultHttpClient();

			    // Prepare a request object
			    HttpGet httpget = new HttpGet(url); 

			    // Execute the request
			    HttpResponse response;
			    try {
			        response = httpclient.execute(httpget);
			        // Examine the response status
			        Log.i("Praeda",response.getStatusLine().toString());

			        // Get hold of the response entity
			        HttpEntity entity = response.getEntity();
			        // If the response does not enclose an entity, there is no need
			        // to worry about connection release

			        if (entity != null) {

			            // A Simple JSON Response Read
			            InputStream instream = entity.getContent();
			            result= convertStreamToString(instream);
			            // now you have the string representation of the HTML request
			            Log.i(TAG, result);
			            instream.close();
			        }


			    } catch (Exception e) {}
			    
			}
		}
		
		return result;
	}
	
    private static String convertStreamToString(InputStream is) {
	    /*
	     * To convert the InputStream to String we use the BufferedReader.readLine()
	     * method. We iterate until the BufferedReader return null which means
	     * there's no more data to read. Each line will appended to a StringBuilder
	     * and returned as String.
	     */
	    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
	    StringBuilder sb = new StringBuilder();
	
	    String line = null;
	    try {
	        while ((line = reader.readLine()) != null) {
	            sb.append(line + "\n");
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    } finally {
	        try {
	            is.close();
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	    }
	    return sb.toString();
    }
	
	//does the temp conversion
	public void updateTemps(String temp){
		String text = "";
		for(int i = 0; i<types.length; i++){
			String type = types[i];
			Float finalTemp = new Float(0);
			Boolean isF = type == getString(R.string.f);
			Boolean isC = type == getString(R.string.c);
			if(isF){
				finalTemp = Float.parseFloat(temp);
			}else if(isC){
				finalTemp = (float) ((Float.parseFloat(temp)-32)*.55);
			}else{
				finalTemp = (float) ((Float.parseFloat(temp)-32)*.55 + 273.15);
			}
			text = text+"\r\n"+finalTemp+" "+type;
		}
		result.setText(text);
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

}
