package com.ivinny.tempcalc;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.ExecutionException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.ivinny.json.CitiesT;
import com.ivinny.json.Json;

import android.app.AlertDialog;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;

public class MainFragment extends Fragment {
	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setRetainInstance(false);
	}
	
	LinearLayout ll;
	LinearLayout.LayoutParams lp;
	EditText et;
	TextView result;
	String[] types;
	TextView dataTView;
	String jsonStr;
	
	@Override
	public void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
		super.onSaveInstanceState(outState);
		outState.putString("json", jsonStr);
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		final Context context = getActivity();
		//adds the types from the resources 

		ll = (LinearLayout) inflater.inflate(R.layout.form, container, false);
		ll.setOrientation(LinearLayout.VERTICAL);
		lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);
		ll.setLayoutParams(lp);
		
		
		//button used to download json data (for now we aren just simulating this)
		Button getDataBtn = (Button)ll.findViewById(R.id.button2);;
		getDataBtn.setText("Download Cities");
		
		//results of json data after formatted
		dataTView = (TextView)ll.findViewById(R.id.textView3);;
		
		//button click for loading json data
		getDataBtn.setOnClickListener(new View.OnClickListener() {
			
			@Override
			public void onClick(View v) {
				ConnectivityManager cm = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
				NetworkInfo ni = cm.getActiveNetworkInfo();
				if(ni!=null){
					if(ni.isConnected()){
						Log.i("network","online");
						JSONArray ar = null;
						try {
							JSONObject citiesToGet = new JSONObject(Json.getJsonString());
							ar = citiesToGet.getJSONArray("Cities");
							 
						} catch (JSONException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						JSONArray cities = new JSONArray();
						
						//adds results for fetch (json string) to an array of cities info
						for(int i = 0; i<ar.length(); i++){
							jsonStr = null;
							try {
								jsonStr = getTempForCityFromWebSvc(ar.getJSONObject(i).getString("city"), ar.getJSONObject(i).getString("state"));
								Log.i("json", jsonStr);
							} catch (JSONException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
							
							// TODO Auto-generated method stub
							JSONObject jsonObj = null;
							//using try catches to avoid app lockups
							try {
								Log.i("json", jsonStr);
								jsonObj = new JSONObject(jsonStr);
								cities.put(jsonObj);
							} catch (JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}

						try {
							String text = "";
						    for(int i=0;i<cities.length();i++){
						    	//getting json from string in jsonobject
						        final JSONObject json_data = cities.getJSONObject(i).getJSONObject("current_observation");;
						        final String city =  json_data.getJSONObject("display_location").getString("city");
						        final String url = json_data.getString("forecast_url");
						        //enum from string
						        CitiesT jType = CitiesT.fromLetter(city);
						        
						        final double temp =  json_data.getDouble("temp_f");
						        // .. get all value here
						        Log.i("City: ", city);  
						        Button cityB = new Button(context);
						        cityB.setText(city+": "+temp+" ("+jType.isCold(temp)+")");
						        cityB.setOnClickListener(new View.OnClickListener() {
									
									@Override
									public void onClick(View v) {
										// TODO Auto-generated method stub
										
									    ConversionFragment viewer = (ConversionFragment) getFragmentManager()
									            .findFragmentById(R.id.confragid);
									    if (viewer == null || !viewer.isInLayout()) {
											Intent intent = new Intent(context, ConversionActivity.class);
							                Bundle bundleObj = new Bundle();
							                //Just pass a username to other screen
							                bundleObj.putString("city", city);
							                bundleObj.putString("url", url);
							                bundleObj.putString("temp", Double.toString(temp));
							                intent.putExtras(bundleObj);
											startActivity(intent);
									    } else {
									        viewer.updateUI(url, city, Double.toString(temp));
									    }

									}
								});
						        ll.addView(cityB);
//						        text = text+"\r\n"+city+": "+temp+" ("+jType.isCold(temp)+")";
						    }
						    dataTView.setText(text);
						    
						    //writing a cache file
						    String content = text;
						    File file = new File(getActivity().getCacheDir(), "appCache");
						    FileOutputStream fos = new FileOutputStream(file.getAbsolutePath(), true);
						    fos.write(content.getBytes());
						    fos.close();
						} catch (JSONException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
					}else{
						showAlert();
					}
				}else{
					showAlert();
				}

			}
		});
		
		ScrollView sv = new ScrollView(getActivity());
		sv.addView(ll);
		return sv;
	}
	
	@Override
	public void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
	}
	
	//alert for no internet
	public void showAlert(){
		try {
			File cacheFile = new File(getActivity().getCacheDir(), "appCache");
			if(cacheFile.exists()){	//if cache exists use it
				FileInputStream fis = new FileInputStream(cacheFile);
				StringBuffer fileContent = new StringBuffer("");
	
				byte[] buffer = new byte[1024];
	
				while (fis.read(buffer) != -1) {
				    fileContent.append(new String(buffer));
				}
				dataTView.setText(fileContent.toString());
				fis.close();
				
			}else{		//else show alert
				AlertDialog.Builder alt = new AlertDialog.Builder(getActivity());     
				alt.setMessage("Not Connected To The Internet.").setPositiveButton("OK", null);
				alt.show();
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	//get network data (specific weather info for city and state
	public String getTempForCityFromWebSvc(String city, String state){

		String url = "http://api.wunderground.com/api/87a8ccdf84e0370d/conditions/q/"+state+"/"+city+".json";
		WeatherAsync resp = new WeatherAsync();
		String returnStr = null;
		try {
			returnStr = resp.execute(url).get();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ExecutionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return returnStr;
	}
	
}
